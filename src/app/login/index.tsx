// src/app/pages/login/index.tsx
"use client";
import Head from 'next/head';

import { useState, useEffect, useContext, memo } from 'react';
// import { Logo } from './logo';
import LoginForm from './login-form';
// import PasswordForm from './password-form';
import { store } from './data';
import useLoginStore from '../../store/loginStore';
import { Counter } from '../common/components/counter/Counter';


// import { LoginContext } from '../../state/login-state';
// import './style.scss';

const Login = () => {
    const [showRest, setShowRest] = useState(false);
    const [ipaddress, setIpAddress] = useState<string | null>(null);
    const [lookup, setLookup] = useState<any | null>(null);

    const {
        loggedIn,
        showSpinner,
        success,
        error,
        showOtpForm,
        clearNotices,
        setShowOtpForm,
        setSuccess,
        setError,
        history,
        saveHistory,
        setCounter,
        counter,
    } = useLoginStore();

    // const { setCounter } = useContext(LoginContext);

    const env = process.env.NEXT_PUBLIC_ENV === 'production' ||
        process.env.NEXT_PUBLIC_ENV === 'staging' ||
        process.env.NEXT_PUBLIC_ENV === 'develop' ||
        process.env.NEXT_PUBLIC_ENV === 'uat';

    const getIp = async () => {
        try {
            const data = await store.getIP({ ip: ipaddress });
            if (data) {
                setLookup(data.data);
            }
        } catch (error) {
            console.error(error.message);
        }
    };

    const getIpAddress = async () => {
        try {
            const data = await store.getIPAddress();
            if (data) {
                setIpAddress(data.ip);
            }
        } catch (error) {
            console.error(error.message);
        }
    };

    useEffect(() => {
        getIpAddress();
    }, []);

    useEffect(() => {
        clearNotices();
        if (!loggedIn) {
            if (env && ipaddress) {
                getIp();
            }
        }
        saveHistory(history);
    }, [loggedIn, history, ipaddress]);

    const getBrowser = () => {
        if (typeof window === 'undefined') {
            return 'Unknown'; // Return a default value for server-side rendering
        }

        if ((navigator.userAgent.indexOf('Opera') !== -1) || (navigator.userAgent.indexOf(' OPR/') >= 0)) {
            return 'Opera';
        }
        if (navigator.userAgent.indexOf('Edg') !== -1) {
            return 'Edge';
        }
        if (navigator.userAgent.indexOf('Chrome') !== -1) {
            return 'Chrome';
        }
        if (navigator.userAgent.indexOf('Safari') !== -1) {
            return 'Safari';
        }
        if (navigator.userAgent.indexOf('Firefox') !== -1) {
            return 'Firefox';
        }
        if ((navigator.userAgent.indexOf('MSIE') !== -1) || (!!document.documentMode === true)) {
            return 'IE';
        }
        return 'Unknown';
    };


    const configs = {
        browser: env ? getBrowser() : null,
        lookup,
    };

    const toggleForm = () => {
        setShowRest(!showRest);
        setShowOtpForm(false);
        setSuccess(null);
        setError(null);
        setCounter(300);
    };

    const backToLogin = () => {
        setShowOtpForm(false);
        setSuccess(null);
        setError(null);
        setCounter(300);
    };

    const logindisabled = success === "A One-Time Password (OTP) has been sent to your email. Select Remember device below to continue." ? false : true;

    const renderHeading = () => showOtpForm ? '2-Step Authentication' : showRest ? 'Reset Password' : 'Login';

    const renderLoginButton = () => (
        <button onClick={toggleForm} className="btn btn-sm btn-primary simple-button" type="button">
            Login ?
        </button>
    );

    const renderForgotButton = () => (
        <button onClick={toggleForm} className="btn btn-sm btn-primary simple-button" type="button">
            Forgot password ?
        </button>
    );

    const renderLoginTwo = () => (
        <button disabled={logindisabled} onClick={backToLogin} className="btn btn-sm btn-primary simple-button" type="button">
            Go to Login
        </button>
    );

    return (
        <Head>

            <div>
                {/* <Head> */}
                <title>Next.js Zustand Example</title>
                <meta name="description" content="Generated by create next app" />
                <link rel="icon" href="/favicon.ico" />
                {/* </Head> */}

                <main>
                    <h1>Welcome to Next.js with Zustand</h1>
                    <Counter />
                </main>
            </div>

        </Head>

    );
};

export default memo(Login);
